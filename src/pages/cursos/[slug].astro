---
import type { APICursos, Curso } from "../../utils/curso";
import BuyButton from "../../components/BuyButton.astro";

// 1. Definimos la forma de lo que retorna getStaticPaths
interface StaticPath {
  params: { slug: string };
  props: { curso: Curso };
}

// 2. getStaticPaths: genera las rutas dinámicas a partir de la API
export async function getStaticPaths(): Promise<StaticPath[]> {
  // Obtenemos todos los cursos
  const res = await fetch("https://admin.nicolascarrillo.com/api/cursos");
  const data = (await res.json()) as APICursos;

  // Retornamos un array con { params: { slug }, props: { curso } }
  return data.docs.map((curso) => ({
    params: { slug: curso.slug },
    props: { curso },
  }));
}

// 3. Definimos la forma de los parámetros de getStaticProps
interface StaticPropsParams {
  params: { slug: string };
  props: { curso: Curso };
}

// 4. getStaticProps: a cada ruta le “inyectamos” las props
export async function getStaticProps({ params, props }: StaticPropsParams) {
  // Podrías hacer fetch adicional basado en params.slug, si quisieras,
  // pero aquí aprovechamos el 'curso' que ya pasamos desde getStaticPaths.
  return {
    props: {
      curso: props.curso,
    },
  };
}

// 5. Obtenemos el curso tipado
const { curso } = Astro.props as { curso: Curso };
const { title, coverImage, imagenesAdicionales, descripcionCurso } = curso;
---

<html>
  <head>
    <title>{title}</title>
  </head>
  <body>
    <a href="/cursos" style="opacity: 0.7">← Volver al listado</a>
    <h1>{title}</h1>

    <!-- Imagen de portada, si existe -->
    {
      coverImage && (
        <img
          src={coverImage.url}
          alt={coverImage.filename}
          style="max-width: 300px;"
        />
      )
    }

    <!-- Descripción del curso, si existe -->
    {descripcionCurso && <p>{descripcionCurso}</p>}

    <!-- Imágenes adicionales, si existen -->
    {
      imagenesAdicionales && imagenesAdicionales.length > 0 && (
        <section>
          <h2>Imágenes adicionales</h2>
          {imagenesAdicionales.map((item) => {
            const { id, imagen } = item;
            return (
              <div data-key={id}>
                <img
                  src={imagen.url}
                  alt={imagen.filename}
                  style="max-width: 200px;"
                />
              </div>
            );
          })}
        </section>
      )
    }

    <!-- Button con server:defer -->
    <!-- Podrías usar un onClick con lógica que se ejecute en cliente o en server. -->
    <!-- Ejemplo trivial que lanza un alert del lado del cliente. -->
    <BuyButton server:defer />
    Comprar
  </body>
</html>
