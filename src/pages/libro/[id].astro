---
import { SHOW_BUY_BUTTON } from "astro:env/server";
import Layout from "../../layouts/Layout.astro";
import AmazonLogo from "../../components/AmazonLogo.astro";
import BookScore from "../../components/BookScore.astro";
import BuyButton from "../../components/BuyButton.astro";

interface APIResponse {
  docs: CursoAPI[];
}

interface CoverImage {
  url: string;
  // ...cualquier otro campo que te interese
}

export interface CursoAPI {
  id: number;
  slug: string;
  title: string;
  descripcionCurso?: string;
  precio?: number;
  coverImage?: CoverImage;
  // ...cualquier otro campo que te interese
}

// El "Book" que el layout espera.
export interface BookData {
  title: string;
  author: string;
  img: string;
  readtime: number;
  description: string;
  buy: number;
}

export interface Book {
  slug: string;
  data: BookData;
}

// OBTENCIÓN DE PATHS / PROPS
// --------------------------
export async function getStaticPaths() {
  // 1) Realizamos el fetch a la API
  const res = await fetch("https://admin.nicolascarrillo.com/api/cursos");
  if (!res.ok) {
    throw new Error(`Error al obtener los cursos: ${res.statusText}`);
  }

  // 2) Parseamos la data (según la forma que devuelva la API)
  const data = (await res.json()) as APIResponse;

  // 3) Mapeamos cada curso del array `docs` a las rutas que Astro necesita
  return data.docs.map((curso) => {
    // Adaptamos la forma del "curso" al "book" que usa este componente
    const book: Book = {
      slug: curso.slug,
      data: {
        title: curso.title,
        // Como no tenemos 'author' en la API de ejemplo, ponemos un valor genérico
        author: "Autor desconocido",
        // Con coverImage.url cubrimos el rol de 'img'
        img: curso.coverImage?.url ?? "placeholder.webp",
        // Ejemplo de un readtime genérico
        readtime: 5,
        // descripción
        description: curso.descripcionCurso ?? "Sin descripción",
        // buy podría ser el precio del curso
        buy: curso.precio ?? 0,
      },
    };

    return {
      params: { id: curso.slug },
      props: { book },
    };
  });
}

// PROPS ENTRANTES
// ---------------
const { book } = Astro.props as { book: Book };
const { data, slug } = book;
const { title, author, img, readtime, description, buy } = data;

export const prerender = true;
---

<Layout title={`${title} - Dev Books`}>
  <div class="flex gap-12">
    <aside class="flex flex-col items-center gap-4">
      <a href="/" class="hover:underline opacity-70">← Volver atrás</a>

      <!-- Imagen del curso/libro -->
      <img
        transition:name={`img-${slug}`}
        class="rounded w-72 h-auto"
        src={img}
        alt={title}
      />

      <!-- Componente que carga puntuación (ejemplo) -->
      <BookScore server:defer id={slug}>
        <span slot="fallback" class="text-xs opacity-70"
          >Cargando puntuación...</span
        >
      </BookScore>

      {SHOW_BUY_BUTTON && <BuyButton server:defer buy={buy} />}
    </aside>

    <main class="max-w-3xl">
      <h1 transition:name={`title-${slug}`} class="text-4xl font-bold mb-4">
        {title}
      </h1>
      <p class="text-sm opacity-80">Autor: {author}</p>
      <p class="text-sm opacity-80 mb-4">Tiempo de lectura: {readtime} min</p>

      <!-- Aquí podrías renderizar la descripción, o el Content si existiese -->
      <div class="prose prose-invert">
        {description}
      </div>
    </main>
  </div>
</Layout>
